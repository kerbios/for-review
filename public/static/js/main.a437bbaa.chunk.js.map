{"version":3,"sources":["components/Header.js","components/Message.js","components/MessageList.js","actions/types.js","actions/index.js","hooks/useChat.js","components/App.js","reducers/auth.js","reducers/message.js","reducers/index.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","profile","classes","className","AppBar","Toolbar","Typography","variant","id","Button","color","href","renderLoginButton","Message","props","from","message","datetime","MessageList","messages","Box","map","i","FETCH_PROFILE","FETCH_MESSAGES","FETCH_MESSAGES_BULK","fetchProfile","dispatch","a","axios","get","type","payload","data","fetchMessages","useChat","socketRef","useRef","useDispatch","useEffect","current","window","WebSocket","location","host","onopen","console","log","onclose","e","code","reason","onmessage","JSON","parse","disconnect","sendMessage","send","stringify","position","bottom","right","ScrollTop","children","trigger","useScrollTrigger","target","undefined","disableHysteresis","threshold","Zoom","in","onClick","event","anchor","ownerDocument","document","querySelector","scrollIntoView","behavior","block","role","App","useSelector","state","textField","handleClick","preMessage","googleId","to","value","minWidth","CssBaseline","Container","my","ref","onKeyDown","keyCode","Fab","size","aria-label","initialState","authReducer","action","messageReducer","_","uniqBy","combineReducers","messageReduser","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","chatTheme","createMuiTheme","palette","primary","main","purple","secondary","red","overrides","responsiveFontSizes","store","createStore","reducers","applyMiddleware","ReactDOM","render","StrictMode","ThemeProvider","getElementById"],"mappings":"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","file":"static/js/main.a437bbaa.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n// import { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n}));\n\nconst Header = ({ profile }) => {\n    const classes = useStyles();\n\n    const renderLoginButton = () => {\n        /* proxy bug */\n        switch (!!profile.id) {\n            case false:\n                return (<Button color=\"primary\" variant=\"contained\" className={classes.menuButton}>\n                    <a href=\"/auth/google\">Login</a>\n                </Button>)\n            default:\n                return (<Button color=\"secondary\" variant=\"contained\" className={classes.menuButton}>\n                    <a href=\"/auth/logout\">Logout</a>\n                </Button>)\n        };\n    };\n\n    return (\n        <div className={classes.root}>\n            <AppBar>\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>Test task chat application</Typography>\n                    {renderLoginButton()}\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1\n    }\n}));\n\nconst Message = (props) => {\n    const { from, message, datetime } = props;\n    const classes = useStyles();\n\n    return (\n        <Typography className={classes.root}>{from}: {message}</Typography>\n    );\n}\n\nexport default Message;","import React from 'react';\nimport Message from './Message';\nimport Box from '@material-ui/core/Box';\n\nconst MessageList = ({ messages }) => {\n    return (\n        <Box>\n            {\n                messages.map((message, i) => {\n                    return (<Message key={i} {...message} />)\n                })\n            }\n        </Box>\n    )\n};\n\nexport default MessageList;","export const FETCH_PROFILE = 'FETCH_PROFILE';\nexport const FETCH_MESSAGES = 'FETCH_MESSAGES';\nexport const FETCH_MESSAGES_BULK = 'FETCH_MESSAGES_BULK';","import axios from 'axios';\nimport { \n    FETCH_PROFILE,\n    FETCH_MESSAGES_BULK\n} from './types';\n\nexport const fetchProfile = async (dispatch) => { \n    const profile = await axios.get('/auth/profile');\n    dispatch({ type: FETCH_PROFILE , payload: profile.data });\n}\n\n// TODO: need to implement pagination to preload message history in chunks\n// here by default we receive last 100 messages.\nexport const fetchMessages = async (dispatch) => {\n    const messages = await axios.get('/api/messages');\n    dispatch({ type: FETCH_MESSAGES_BULK, payload: messages.data });\n}\n\n","import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { FETCH_MESSAGES } from '../actions/types';\n\nconst NEW_CHAT_MESSAGE_EVENT = 'NEW_MESSAGE';\n\nconst useChat = () => {\n  const socketRef = useRef();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n\n    // TODO: need to implement reconnect logic \n    socketRef.current = new window.WebSocket('wss://' + window.location.host + '/channel') || {}\n    \n    socketRef.current.onopen = () => { // need to specify security checking and transfer your uid on open\n        console.log('connection opened:');\n    }\n\n    socketRef.current.onclose = (e) => {\n        console.log('connection closed:', e.code, e.reason);\n    }\n\n    socketRef.current.onmessage = (e) => {\n        console.log('message:', e.data);\n        const message = JSON.parse(e.data);\n        dispatch({ type: FETCH_MESSAGES, payload: message });\n    }\n    \n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, []);\n\n  const sendMessage = (message) => {\n    message = {\n        type: NEW_CHAT_MESSAGE_EVENT,\n        ...message\n    };\n\n    socketRef.current.send(JSON.stringify(message));\n  };\n\n  return { sendMessage };\n};\n\nexport default useChat;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport Fab from '@material-ui/core/Fab';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport Zoom from '@material-ui/core/Zoom';\nimport Header from './Header';\nimport { useEffect, useRef } from 'react';\nimport MessageList from './MessageList';\nimport { fetchProfile, fetchMessages } from '../actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport useChat from '../hooks/useChat';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: 'fixed',\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  },\n}));\n\nfunction ScrollTop(props) {\n  const { children, window } = props;\n  const classes = useStyles();\n  const trigger = useScrollTrigger({\n    target: window ? window() : undefined,\n    disableHysteresis: true,\n    threshold: 100,\n  });\n\n  const handleClick = (event) => {\n    const anchor = (event.target.ownerDocument || document).querySelector('#back-to-top-anchor');\n\n    if (anchor) {\n      anchor.scrollIntoView({ behavior: 'smooth', block: 'center' });\n    }\n  };\n\n  return (\n    <Zoom in={trigger}>\n      <div onClick={handleClick} role=\"presentation\" className={classes.root}>\n        {children}\n      </div>\n    </Zoom>\n  );\n}\n\nScrollTop.propTypes = {\n  children: PropTypes.element.isRequired,\n  window: PropTypes.func,\n};\n\nfunction App() {\n    const profile = useSelector(state => state.profile);\n    const messages = useSelector(state => state.messages);\n    const dispatch = useDispatch();\n    console.log('profile:', profile);\n    console.log('messages', messages);\n\n    useEffect(() => {\n        console.log('App render');\n        fetchProfile(dispatch);\n        fetchMessages(dispatch);\n    }, [profile.id]);\n\n    const textField = useRef();\n    const { sendMessage } = useChat();\n    const handleClick = () => {\n        if (!profile.id) return;\n\n        const preMessage = {\n            from: profile.googleId, // here need to send uids but it's test task\n            to: 'ALL', // technincal usage\n            message: textField.current.value\n        };\n\n        textField.current.value = '';\n\n        sendMessage(preMessage);\n    };\n    const onEnter = (e) => {\n        if (e.keyCode === 13) {\n            handleClick()\n        }\n    };\n\n    return (\n        <Box minWidth={300}>\n            <CssBaseline />\n            <Header profile={profile} />\n            <Toolbar id=\"back-to-top-anchor\" />\n            <Container>\n                <Box my={2}>\n                    <MessageList messages={messages} />\n                </Box>\n                <Box>\n                    <input type='text' ref={textField} onKeyDown={onEnter} />\n                    <button onClick={handleClick}>SEND</button>\n                </Box>\n            </Container>\n            <ScrollTop>\n                <Fab color=\"secondary\" size=\"small\" aria-label=\"scroll back to top\">\n                    <KeyboardArrowUpIcon />\n                </Fab>\n            </ScrollTop>\n        </Box>\n    );\n};\n\nexport default App;\n","import { FETCH_PROFILE } from '../actions/types';\n\nconst initialState = {};\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_PROFILE:\n            return action.payload || false;\n        default:\n            return state;\n    }\n};\n\nexport default authReducer;","import { FETCH_MESSAGES, FETCH_MESSAGES_BULK } from '../actions/types';\nimport _ from 'lodash';\n\nconst initialState = [];\n\nconst messageReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_MESSAGES:\n            return [...state, action.payload];\n        case FETCH_MESSAGES_BULK:\n            return _.uniqBy([...state, ...action.payload], 'uid');\n        default:\n            return state;\n    }\n};\n\nexport default messageReducer;","import { combineReducers } from 'redux';\nimport authReducer from './auth';\nimport messageReduser from './message';\n\nexport default combineReducers({\n    profile: authReducer,\n    messages: messageReduser\n});","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport './index.css';\nimport App from './components/App';\nimport reducers from './reducers';\nimport reportWebVitals from './reportWebVitals';\nimport { createMuiTheme, ThemeProvider, responsiveFontSizes } from '@material-ui/core/styles';\nimport { red, purple } from '@material-ui/core/colors';\n\nlet chatTheme = createMuiTheme({\n  palette: {\n      primary: {\n          main: purple[500],\n      },\n      secondary: {\n          main: red[500],\n      },\n      overrides: {\n        Button: {\n          color: 'white',\n        },\n      }\n  },\n});\n\nchatTheme = responsiveFontSizes(chatTheme);\n\nconst store = createStore(reducers, {}, applyMiddleware());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={chatTheme}>\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals(console.log);\n"],"sourceRoot":""}